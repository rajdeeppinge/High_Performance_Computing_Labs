#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<omp.h>
#include<math.h>
typedef struct {
  unsigned char red,green,blue;
} PPMPixel;

typedef struct {
  int x, y;
  PPMPixel *data;
} PPMImage;

typedef struct {
  unsigned char gs;
} PPMPixelGS;


typedef struct {
  int x, y;
  PPMPixelGS *data;
} PPMImageGS;



#define RGB_COMPONENT_COLOR 255


void writePPMGS(const char *filename, PPMImageGS *img)
{
  FILE *fp;
  //open file for output
  fp = fopen(filename, "wb");
  if (!fp) {
    fprintf(stderr, "Unable to open file '%s'\n", filename);
    exit(1);
  }

  //write the header file
  //image format
  fprintf(fp, "P5\n");

    

  //image size
  fprintf(fp, "%d %d\n",img->x,img->y);

  // rgb component depth
  fprintf(fp, "%d\n",RGB_COMPONENT_COLOR);

  // pixel data
  fwrite(img->data, img->x, img->y, fp);
  fclose(fp);
}



PPMImageGS * changeImage(PPMImage * im)
{
  int rows = im->x;
  int cols = im->y;
  int i,j;

  PPMImageGS *im2 = (PPMImageGS *) malloc(sizeof(PPMImageGS));
  im2->x = rows;
  im2->y = cols;
  im2->data = (PPMPixelGS *) malloc(rows*cols*sizeof(PPMPixelGS));
  int r,g,b,idx;	
  for(i=0;i<rows;i++)
    {
      for(j=0; j<cols; j++)
	{
	  idx = rows*i + j;
	  PPMPixel *temp = im->data + idx;
	  r = temp->red;
	  g = temp->green;
	  b = temp->blue;
	  PPMPixelGS *temp2 = im2->data + idx;
	  temp2->gs = 0.21*r+0.71*g+0.07*b;
	}	
    }
	
  return im2;
}

static PPMImage *readPPM(const char *filename)
{
  char buff[16];
  PPMImage *img;
  FILE *fp;
  int c, rgb_comp_color;
  //open PPM file for reading
  fp = fopen(filename, "rb");
  if (!fp) {
    fprintf(stderr, "Unable to open file '%s'\n", filename);
    exit(1);
  }

  //read image format
  if (!fgets(buff, sizeof(buff), fp)) {
    perror(filename);
    exit(1);
  }

  //check the image format
  if (buff[0] != 'P' || buff[1] != '6') {
    fprintf(stderr, "Invalid image format (must be 'P6')\n");
    exit(1);
  }

  //alloc memory form image
  img = (PPMImage *)malloc(sizeof(PPMImage));
  if (!img) {
    fprintf(stderr, "Unable to allocate memory\n");
    exit(1);
  }

  //check for comments
  c = getc(fp);
  while (c == '#') {
    while (getc(fp) != '\n') ;
    c = getc(fp);
  }

  ungetc(c, fp);
  //read image size information
  if (fscanf(fp, "%d %d", &img->x, &img->y) != 2) {
    fprintf(stderr, "Invalid image size (error loading '%s')\n", filename);
    exit(1);
  }

  //read rgb component
  if (fscanf(fp, "%d", &rgb_comp_color) != 1) {
    fprintf(stderr, "Invalid rgb component (error loading '%s')\n", filename);
    exit(1);
  }

  //check rgb component depth
  if (rgb_comp_color!= RGB_COMPONENT_COLOR) {
    fprintf(stderr, "'%s' does not have 8-bits components\n", filename);
    exit(1);
  }

  while (fgetc(fp) != '\n') ;
  //memory allocation for pixel data
  img->data = (PPMPixel*)malloc(img->x * img->y * sizeof(PPMPixel));

  if (!img) {
    fprintf(stderr, "Unable to allocate memory\n");
    exit(1);
  }

  //read pixel data from file
  if (fread(img->data, 3 * img->x, img->y, fp) != img->y) {
    fprintf(stderr, "Error loading image '%s'\n", filename);
    exit(1);
  }

  fclose(fp);
  return img;
}

void writePPM(const char *filename, PPMImage *img)
{
  FILE *fp;
  //open file for output
  fp = fopen(filename, "wb");
  if (!fp) {
    fprintf(stderr, "Unable to open file '%s'\n", filename);
    exit(1);
  }

  //write the header file
  //image format
  fprintf(fp, "P6\n");

  //comments


  //image size
  fprintf(fp, "%d %d\n",img->x,img->y);

  // rgb component depth
  fprintf(fp, "%d\n",255);

  // pixel data
  fwrite(img->data, 3 * img->x, img->y, fp);
  fclose(fp);
}


PPMPixel * bilinearinterpolation(PPMImage* image, int rows, int columns, double x, double y) 
{

	// the four points to interpolate on	
	int xf= floor(x);
	int yf= floor(y);

	int xc= ceil(x);
	int yc=	ceil(y);

	PPMPixel *fxy1, *fxy2, *fq11, *fq21, *fq12, *fq22, *f;
	double xfactor1, xfactor2, yfactor1, yfactor2;

	xfactor1 = (xc-x)/(xc-xf);
	xfactor2 = (x-xf)/(xc-xf);

	fq11 = image->data + xf*rows + yf;
	fq21 = image->data + xf*rows + yc;
	fq12 = image->data + xc*rows + yf;
	fq22 = image->data + xc*rows + yc;

	fxy1->red = xfactor1 * fq11->red + xfactor2 * fq21->red;
	fxy1->green = xfactor1 * fq11->green + xfactor2 * fq21->green;
	fxy1->blue = xfactor1 * fq11->blue + xfactor2 * fq21->blue;
	
	fxy2->red = xfactor1 * fq12->red + xfactor2 * fq22->red;
	fxy2->green = xfactor1 * fq12->green + xfactor2 * fq22->green;
	fxy2->blue = xfactor1 * fq12->blue + xfactor2 * fq22->blue;

	yfactor1 = (yc-y)/(yc-yf);
	yfactor2 = (y-yf)/(yc-yf);

	f->red = yfactor1 * fxy1->red + yfactor2 * fxy2->red;
	f->green = yfactor1 * fxy1->green + yfactor2 * fxy2->green;
	f->blue = yfactor1 * fxy1->blue + yfactor2 * fxy2->blue; 
	 
	return f;
}


PPMImage* warping (PPMImage *impimage )
{
// takes in input as ppmimage
//warps and returns a ppm

// x,y, pixel

	int cx,cy,i,j;
	double x_toreadfrom,y_toreadfrom;
	

	int rows=impimage->x;
	int columns=impimage->y;
	
	//image 2 decla
	PPMImage *im2 = (PPMImage*) malloc(sizeof(PPMImage));
  	im2->x = rows;
  	im2->y = columns;
  	im2->data = (PPMPixel *) malloc(rows*columns*sizeof(PPMPixel));
  	int r,g,b,idx,idx2;



	cx=rows/2;
	cy=columns/2; // assume rotation centre is images centre itself
	double theta0 = 1*180.0/(2*3.14159);
 	double distcen=0;
	//loop through
	for (i=0;i<rows;i++)
		{
			for(j=0;j<columns;j++)
				{
					distcen= sqrt( (i-cx)*(i-cx) + (j-cy)*(j-cy) ) ;
					//x_toreadfrom= rows - i;
					//y_toreadfrom = columns- j;


					x_toreadfrom= (i - cx)*cos(theta0*distcen) + (j-cy)*sin(theta0*distcen) + cx ;
					y_toreadfrom= -(j - cy)*sin(theta0*distcen) + (j-cy)*cos(theta0*distcen) + cy;
					idx2= rows*i + j;
					if (x_toreadfrom<rows && x_toreadfrom>=0 && y_toreadfrom<columns && y_toreadfrom>=0 )
						im2->data+idx2 = bilinearinterpolation(impimage, rows, columns, x_toreadfrom, y_toreadfrom);
/*	
				if (x_toreadfrom<rows && x_toreadfrom>=0 && y_toreadfrom<columns && y_toreadfrom>=0 )
					{

// do without using temp
					idx = rows*x_toreadfrom + y_toreadfrom;
		  			PPMPixel *temp = impimage->data + idx;
		  			r = temp->red;
		  			g = temp->green;
		  			b = temp->blue;
						idx2= rows*i + j;
						PPMPixel *temp2 = im2->data + idx2;
		  			temp2->red=r;
		  			temp2->green=g;
		  			temp2->blue=b;
					}
*/
				}
		}

return im2;



}




int main(int argc, char* argv[]){
  if(argc<2)
    printf("Enter filename\n");
  char* filename=argv[1];

  PPMImage *image;
  clock_t start, end;

  image = readPPM(filename);


  start=clock();

  /* float start_omp=omp_get_wtime(); */
 // PPMImageGS * x = changeImage(image);
  /* float stop_omp=omp_get_wtime(); */
 // end=clock();
    
 // printf("Time: %0.10f\n", (end-start)/(double)CLOCKS_PER_SEC );
  /* printf("Time: %0.10f\n", (stop_omp-start_omp) ); */
//  writePPMGS("lenags.ppm",x);

	// warping 
	PPMImage* warped_image = warping (image);
end=clock();
 printf("Time: %0.10f\n", (end-start)/(double)CLOCKS_PER_SEC );


writePPM("//home//student//Desktop//hpc_201401086_103//warped_lenna2.ppm",warped_image);
return 0;
}

