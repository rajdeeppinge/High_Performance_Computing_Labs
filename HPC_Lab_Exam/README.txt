This file contains instructions regarding using the Python scripts to create input for your code, run your code for all the required configurations and to plot the required graphs.

Ensure that the four codes that you have written and the scripts you have been provided with are in the same folder (working directory). The scripts will create the following folders in your working directory:
logs
input
output
output-validation

If you run the scripts again, the folders will be renamed using a random number so that none of your previously computed data is lost. It is your responsibility to keep your working directory clean, that is not handled by the scripts. You can use something like `rm -rf *renamed*` to remove all the folders along with their contents.

The logs folder will contain the times that your codes take. It will also contain the hardware details of your system that will be automatically generated using the 'lscpu' command as well as from the '/proc/cpuinfo' files.

The input folder will contain the input files for your problem. These will be created in the case of Vector Multiplication, Matrix Multiplication, Prefix Sum, Reduction and Filtering. For the two image related problems, the image to be used will be provided to you. For the Trapezoidal, Pi using Series and the Monte Carlo problems, no input is required except for the problem size which will automatically be given by the scripts.

The output folder is the folder into which you will write your outputs. Ensure that you write into a file in that folder and that you follow the convention the following convention:

problemname_approachname_n_p_output.txt
 
where problemname is the name of the problem, approachname is the name of the appraoch, n is the problem size and p is the number of processors.


The output-validation folder contains the correct outputs for all the inputs that will be generated by our scripts. You can use those to verify that your scripts are running accurately. We will be using the outputs in these folders to check whether your programs are functionally correct. For the image related problems, you will be asked to fix the parameters used so that there is uniformity in the end result. For the three remaining problems which don't have any inputs, ensure that your code calculates the value of Pi (it is better to use formulas that compute pi in each of the three problems) as accurately as possible.


# maps.py

This script can be used to figure out what exactly is the name used for your particular problem and approach. Please use that exact naming convention everywhere.


# create_input.py

This script will create the inputs that you will require for running your codes.
Usage:

create_input.py problem_name

'problem_name' is the name of the problem assigned to you.


# run.py

This is the script that will run your code for all the required configurations.
Usage:

run.py problem_name approach_name serial_executable parallel_executable runs

'problem_name' is the name of the problem assigned to you.
'approach_name' is the name of the appraoch assigned to you.
'serial_executable' must be the name of the compiled executable file for the serial code.
'parallel_executable' must be the name of the compiled executable file for the parallel code.
'runs' is the number of times to run the codes. Run at least thrice and ideally 10 times.

# plotter.py

This script will plot the required graphs for you using the logs that will be created by the run.py script. Since all conceivable graphs are being made, it is your responsibility to use the relevant one's to make sense of the trends/results.
Usage:

plotter.py log_file

'log_file' is the file containing the logs of the runs that have been done.

# timer_sample_code.c


The timer_sample_code.c contains a simple illustrative code that explains how you can take in the command-line inputs as well as the required manner of measuring times as well as the format for printing them.

In case you are unfamiliar with using files to take inputs (will be required for certain problems) you can refer to any simple online tutorial. Here are two:
https://www.tutorialspoint.com/cprogramming/c_file_io.htm

http://www.cprogramming.com/tutorial/cfileio.html
